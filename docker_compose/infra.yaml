services:
  pg_master_text:
    image: postgres:16-alpine
    container_name: pg-master-text
    ports:
      - "45432:5432"
    env_file:
      - ../.dev.env
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - master_text_data:/var/lib/postgresql/data
      - ./db/master-init/pg_hba.conf:/etc/postgresql/pg_hba.conf
    command:
      - "postgres"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"
      - "-c"
      - "wal_level=replica"
      - "-c"
      - "max_wal_senders=10"
      - "-c"
      - "wal_keep_size=64"
      - "-c"
      - "hot_standby=on"
    networks:
      - backend

  pg_slave_text:
    image: postgres:16-alpine
    container_name: pg-slave-text
    depends_on:
      - pg_master_text
    env_file:
      - ../.dev.env
    environment:
      POSTGRES_DB: $POSTGRES_DB
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    volumes:
      - slave_text_data:/var/lib/postgresql/data
      - ./db/slave-init/pg_hba.conf:/etc/postgresql/pg_hba.conf
    entrypoint:
      - "sh"
      - "-c"
      - |
        until pg_isready -h pg-master-text -U $POSTGRES_USER; do sleep 1; done;
        rm -rf /var/lib/postgresql/data/*
        PGPASSWORD=$POSTGRES_PASSWORD pg_basebackup -h pg-master-text -D /var/lib/postgresql/data -U $POSTGRES_USER -Fp -Xs -P -R
        cp /etc/postgresql/pg_hba.conf /var/lib/postgresql/data/pg_hba.conf
        exec docker-entrypoint.sh postgres -c hot_standby=on -c primary_conninfo="host=pg-master-text port=5432 user=$POSTGRES_USER password=$POSTGRES_PASSWORD"
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "psql -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT CASE WHEN pg_is_in_recovery() THEN 0 ELSE 1 END;' | grep 0"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - backend

  pgadmin_text:
    image: dpage/pgadmin4:latest
    container_name: pgadmin_text
    env_file:
      - ../.dev.env
    environment:
      PGADMIN_DEFAULT_EMAIL: $PGADMIN_EMAIL
      PGADMIN_DEFAULT_PASSWORD: $PGADMIN_PASSWORD
    ports:
      - "8080:80"
    depends_on:
      - pg_master_text
      - pg_slave_text
    volumes:
      - pgadmin_text_data:/var/lib/pgadmin
    networks:
      - backend

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    ports:
      - "6432:6432"
    env_file:
      - ../.dev.env
    volumes:
      - ./db/pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./db/pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    command: pgbouncer /etc/pgbouncer/pgbouncer.ini
    depends_on:
      - pg_master_text
      - pg_slave_text
    networks:
      - backend

  redis_master_text:
    image: redis:7
    container_name: redis-master-text
    ports:
      - "6379:6379"
    volumes:
      - redis_master_text_data:/data
      - ./cache/redis/redis-master.conf:/etc/redis/redis.conf
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    networks:
      - backend

  redis_slave_text:
    image: redis:7
    container_name: redis-slave-text
    ports:
      - "6380:6379"
    volumes:
      - redis_slave_text_data:/data
      - ./cache/redis/redis-slave.conf:/etc/redis/redis.conf
    command: [ "redis-server", "/etc/redis/redis.conf" ]
    depends_on:
      - redis_master_text
    networks:
      - backend

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "15672:15672"  # web ui
      - "5672:5672"    # AMQP
    environment:
      - RABBITMQ_DEFAULT_USER=${RMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RMQ_PASSWORD}
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - backend

volumes:
  master_text_data:
  slave_text_data:
  pgadmin_text_data:
  redis_master_text_data:
  redis_slave_text_data:
  rabbitmq_data:

networks:
  backend:
    name: text_case_backend
    driver: bridge